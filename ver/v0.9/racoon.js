/*################################################################*\#|	Product Name: RacoonJS, HTML5 Canvas Game Engine			  |##|	Author: KGBAgent (mail: volter925@gmail.com)				  |##|	Version: v0.9												  |##|	Description: A game engine based on HTML5 Canvas technology,  |##|				 for creating interactive demos and games.		  |#\*################################################################*/// RacoonJS Versionvar racoonVersion = function () {return "v0.9";};// ################// Basic structures// ################function Vector(x,y) {	this.x = x;	this.y = y;	this.dot = function (vec) {		return this.x*vec.x + this.y*vec.y;	};	this.add = function (vec) {		this.x += vec.x;		this.y += vec.y;				return this;	};	this.sub = function (vec) {		this.x -= vec.x;		this.y -= vec.y;				return this;	};	this.unit = function () {		var magnitude = this.magnitude();		var x = (this.x > 0) ? Math.pow(this.x,2)/magnitude : -(Math.pow(this.x,2)/magnitude);		var y = (this.y > 0) ? Math.pow(this.y,2)/magnitude : -(Math.pow(this.y,2)/magnitude);				return vec2(x,y);	};	this.div = function (num) {		this.x /= num;		this.y /= num;				return this;	};	this.sum = function () {		return this.x + this.y;	};	this.scalar = function (num) {		this.x *= num;		this.y *= num;				return this;	};	this.clone = function () {		return vec2(this.x,this.y);	};	this.distance = function (vec) {		return Math.pow(this.x - vec.x,2) + Math.pow(this.y - vec.y,2);	};	this.magnitude = function () {		return this.distance(vecNull());	};	this.isEqual = function(vec) {		return (this.x == vec.x && this.y == vec.y) ? true : false;	};	this.round = function () {		this.x = Math.round(this.x);		this.y = Math.round(this.y);				return this;	};		// Instance Methods	Vector.max = function (vec1,vec2) {		if (vec1.sum() >= vec2.sum()) {			return vec1;		}		else {			return vec2;		}		};		Vector.min = function (vec1,vec2) {		if (vec1.sum() < vec2.sum()) {			return vec1;		}		else {			return vec2;		}		};}function vec2(x,y) {return new Vector(x,y);}function size2vec(s) {return new Vector(s.w,s.h);}function vecNull() {return new Vector(0,0);}function Size(w,h) {	this.w = w;	this.h = h;	this.isNull = function () {		return (w == 0 && h == 0) ? true : false;	};}function size(w,h) {return new Size(w,h);}function Rect(x,y,w,h) {	this.x = x;	this.y = y;	this.w = w;	this.h = h;	this.min = vec2(x,y);	this.max = vec2(x+w,y+h);	this.setSizePos = function (x,y,s) {		this.setPos(x,y);		this.setSize(s);	};	this.clone = function () {		return new Rect(this.x,this.y,this.w,this.h);	};	this.setFromRect = function (rect) {		this.x = rect.x;		this.y = rect.y;		this.w = rect.w;		this.h = rect.h;		this.min = rect.min;		this.max = rect.max;	};	this.setRect = function (p1,p2) {		var min = vec2(Math.min(p1.x,p2.x),Math.min(p1.y,p2.y));		var max = vec2(Math.max(p1.x,p2.x),Math.max(p1.y,p2.y));		var wid = max.x - min.x;		var hei = max.y - min.y;		var x = min.x;		var y = min.y;				this.x = x;		this.y = y;		this.w = wid;		this.h = hei;		this.min = min;		this.max = max;	};		this.setPos = function(x,y) {		this.x = x;		this.y = y;		this.min = vec2(x,y);		this.max = vec2(x+this.w,y+this.h);	};	this.setSize = function (s) {		if (!s.isNull()) {			this.w = Math.abs(s.w);			this.h = Math.abs(s.h);			this.setPos(this.x,this.y);		}	}	this.containVec = function (vec) {		if (vec.x < this.max.x && vec.y < this.max.y &&			vec.x > this.min.x && vec.y > this.min.y ) {			return true;		}		return false;	};	this.setMin = function (vec) {		this.min = vec;		this.x = vec.x;		this.y = vec.y;		this.w = this.max.x - this.min.x;		this.h = this.max.y - this.min.y;				return this;	};	this.setMax = function (vec) {		this.max = vec;		this.w = this.max.x - this.min.x;		this.h = this.max.y - this.min.y;				return this;	};	this.aabb = function (rect) {		if (this.min.x < rect.max.x && this.min.y < rect.max.y &&			this.max.x > rect.min.x && this.max.y > rect.min.y) {			return true;		}				return false;	}	this.aabbToLine = function (line) {		var t0 = 0,t1 = 1;		var dx = line.p2.x - line.p1.x,dy = line.p2.y - line.p1.y;		var p, q, r;			for (edge = 0; edge < 4; edge++) {			if (edge == 0) {				p = -dx;				q = -(this.min.x - line.p1.x);			}			if (edge == 1) {				p = dx;				q = this.max.x - line.p1.x;			}			if (edge == 2) {				p = -dy;				q = -(this.min.y - line.p1.y);			}			if (edge == 3) {				p = dy;				q = this.max.y - line.p1.y;			}			r = q / p;				if (p == 0 && q < 0) return false;				if (p < 0) {				if (r > t1) {					return false;				} 				else if (r > t0) {					t0 = r;				}			} else if (p > 0) {				if (r < t0) {					return false;				} 				else if (r < t1) {					t1 = r;				}			}		}				return true;	}}// #######// Actions// #######function Action(dur) {	this.duration = dur;	this.counter = 0;	this.owner = null;	this.index = 0;	this.animate = function (dt) {			};}function ScaleTo(dur,size) {	this.size = size;	this.initSize = size(0,0);		this.animate = function (dt) {		dt /= new Game().rate;		if (this.initSize.isNull()) {			this.initSize = size(this.owner.scale.w,this.owner.scale.h);		}				this.counter+=dt;		var delta = size((this.size.w-this.initSize.w)/this.duration/new Game().rate,							 (this.size.h-this.initSize.h)/this.duration/new Game().rate);				if (this.counter > this.duration) {			this.owner.scale = this.size;			this.owner.deleteAction(this.index);		}		else {			this.owner.scale.w += delta.w;			this.owner.scale.h += delta.h;		}	}		this.__proto__ = new Action(dur);	this.__proto__.constructor = ScaleTo;}function AlphaTo(dur,alpha) {	this.alpha = alpha;	this.initAlpha = 0;		this.animate = function (dt) {		dt /= new Game().rate;		if (this.initAlpha == 0) {			this.initAlpha = this.owner.opacity;		}				this.counter+=dt;		var delta = (this.alpha-this.initAlpha)/this.duration/new Game().rate;				if (this.counter > this.duration) {			this.owner.opacity = this.alpha;			this.owner.deleteAction(this.index);		}		else {			this.owner.opacity += delta;		}	}		this.__proto__ = new Action(dur);	this.__proto__.constructor = AlphaTo;}function AlphaToWithCallback(dur,alpha,t) {	this.alpha = alpha;	this.initAlpha = 0;	this.target = t;		this.animate = function (dt) {		dt /= new Game().rate;		if (this.initAlpha == 0) {			this.initAlpha = this.owner.opacity;		}				this.counter+=dt;		var delta = (this.alpha-this.initAlpha)/this.duration/new Game().rate;				if (this.counter > this.duration) {			this.owner.opacity = this.alpha;			this.owner.deleteAction(this.index);			this.target();		}		else {			this.owner.opacity += delta;		}	}		this.__proto__ = new Action(dur);	this.__proto__.constructor = AlphaToWithCallback;}// ###########// Game Object// ###########function GameObject(x,y,s) {	this.ctx = null;	this.parent = null;	// Actions	this.actions = [];	this.addAction = function (act) {		act.owner = this;		act.index = this.actions.length;		this.actions[this.actions.length] = act;	}	this.deleteAction = function (ind) {		this.actions.splice(ind,1);				for (var i = 0; i < this.actions.length; i++) {			this.actions[i].index = i;		}	};	// Ctx properties	this.pColor = "#000";	this.sColor = "#fff";	this.rotation = 0;	this.opacity = 1;	this.lWidth = 2;	this.scale = size(1,1);	// Position and BB	this.pos = vec2(x,y);	this.rect = new Rect(x,y,s.w,s.h)	this.setPos = function (x,y) {		this.pos = vec2(x,y);		this.rect.setPos(x,y);	};	// Initialization	this.init = function () {			};	// Enter/Exit Triggers	this.onEnter = function () {		// Implement in subclasses	};	this.onExit = function () {		// Implement in subclasses	};	// Pause/Play	this.running = true;	this.visible = true;	this.play = function () {		this.running = true;	};	this.pause = function () {		this.running = false;	};	// Update method	this.refresh = function (dt) {		if (this.running && this.visible) {			this.update(dt);			this.updateChildren(dt);		}	};	this.update = function (dt) {		// Override in subclass	};	this.updateChildren = function (dt) {		for (var i = 0; i < this.children.length; i++) {			this.children[i].refresh(dt);		}		this.animate(dt);	};	this.animate = function (dt) {		if (this.actions.length != 0) {			for (var i = 0; i < this.actions.length; i++) {				this.actions[i].animate(dt);			}		}		};	// Rendering	this.draw = function (ctx) {		if (this.visible) {			ctx.save();			ctx.translate(this.pos.x,this.pos.y);			ctx.rotate(this.rotation);			ctx.scale(this.scale.w,this.scale.h);			ctx.globalAlpha = this.opacity;			ctx.lineWidth = this.lWidth;			ctx.fillStyle = this.pColor;			ctx.strokeStyle = this.sColor;					this.render(ctx);			this.renderChildren(ctx);						ctx.restore();		}	}	this.render = function (ctx) {		// Override in subclass	};	this.renderChildren = function (ctx) {		for (var i = 0; i < this.children.length; i++) {			this.children[i].draw(ctx);			if (new Game().debug) {				this.children[i].renderAABB(ctx);			}		}	};	// Debug	this.debugColor = "#0f0";	this.renderAABB = function (ctx) {		ctx.lineWidth = 2;		ctx.strokeStyle = this.debugColor;		ctx.strokeRect(this.rect.x,this.rect.y,this.rect.w,this.rect.h);	};	// Children and children management	this.name = "";	this.children = [];	this.childrenName = [];	this.index = -1;	this.addChild = function (obj) {		// Please don't override		if (obj instanceof GameObject) {			obj.index = this.children.length;						this.children[this.children.length] = obj;			this.children[this.children.length-1].parent = this;			this.children[this.children.length-1].ctx = this.ctx;			if (this.name.length == 0) {				this.children[this.children.length-1].name = "name-"+new Game().increaseCounter();			}						if ((this.childrenName[obj.name] == null ||				this.childrenName[obj.name] == undefined) &&				!new Game().isReservedName(obj.name)) {				this.childrenName[obj.name] = obj;								new Game().reserveName(obj.name);				new Game().registerObject(obj);			}			else {				throw new Error('name "'+obj.name+'" is already reserved, please change name of this object!');				return;			}						this.children[this.children.length-1].onEnter();		}	};	this.removeByName = function (name) {		if (name.length != 0) {			var child = new Game().get(name);						delete this.children[child.index];						this.children.splice(child.index,1);						for (var i = 0; i < this.children.length; i++) {				this.children[i].index = i;			}						new Game().remove(child.name);			new Game().removeReservedName(child.name);		}	};	this.removeByIndex = function (ind) {		if (this.children[ind] != null || this.children[ind] != undefined) {			this.children[ind].onExit();						new Game().remove(this.children[ind].name);			new Game().removeReservedName(this.children[ind].name);						delete this.children[ind];						this.children.splice(ind,1);						for (var i = 0; i < this.children.length; i++) {				this.children[i].index = i;			}		}	};	this.removeFromParent = function () {		this.parent.removeByIndex(this.index);	};	this.removeAllChildren = function () {		if (this.children != 0) {			for (var i = 0; i < this.children.length; i++) {				this.removeByIndex(i);			}		}	};	this.getChild = function (ind) {		if (this.children[ind] != null) {			return this.children[ind];		}	};	this.setPos = function (vec) {		this.pos = vec;		this.rect.setPos(vec.x,vec.y);	};	this.convertToNodeSpace = function (vec) {		var retVec = vec.clone();		retVec.sub(this.pos);		return retVec;	};	// Mouse	this.handleMouse = false;	this.targetedHandler = false;	this.mouseHandler = function (state,vec) {		for (var i = 0; i < this.children.length; i++) {			this.children[i].mouseHandler(state,vec);			}	};		this.init();}// ######// Shapes// ######function Rectangle(x,y,s,c) {	this.render = function (ctx) {		ctx.fillRect(0,0,this.rect.w,this.rect.h);		ctx.strokeRect(0,0,this.rect.w,this.rect.h);	};		this.__proto__ = new GameObject(x,y,s);	this.__proto__.constructor = Rectangle;}function Circle(x,y,s,c) {	this.pColor = c;	this.radii = s;	this.render = function (ctx) {		ctx.beginPath();				ctx.arc(0,0,this.radii,0,Math.PI*2,true);				ctx.fill();		ctx.stroke();	};		this.inRadius = function (vec) {		var center = this.pos.clone();		var distance = center.distance(vec);				if (distance < Math.pow(this.radii,2)) {			return true;		}		return false;	}		this.setPos = function (vec) {		this.pos = vec;		this.rect.setPos(vec.x-this.radii,vec.y-this.radii);	};		this.__proto__ = new GameObject(x-s,y-s,size(s*2,s*2));	this.__proto__.constructor = Circle;	this.setPos(vec2(x,y));}function Line(p1,p2,c) {	this.p1 = p1;	this.p2 = p2;	this.pColor = c;	this.setP1 = function (vec) {		//this.setPos(vec.x,vec.y);		var dX = this.p2.x-vec.x;		var dY = this.p2.y-vec.y		this.rect.x = vec.x;		this.rect.y = vec.y;				this.rect.w = dX;		this.rect.h = dY;		this.p1 = vec;	};	this.setP2 = function (vec) {		var dX = this.p1.x-vec.x;		var dY = this.p1.y-vec.y		this.rect.x = vec.x;		this.rect.y = vec.y;				this.rect.w = dX;		this.rect.h = dY;		this.p2 = vec;	};	this.render = function (ctx) {		ctx.strokeStyle = this.pColor;		ctx.lineWidth = 2;		ctx.lineCap = "round";		ctx.beginPath();				ctx.moveTo(this.p1.x,this.p1.y);		ctx.lineTo(this.p2.x,this.p2.y);				ctx.stroke();	};		this.__proto__ = new GameObject(p1.x,p1.y,size(p2.x-p1.x,p2.y-p1.y));	this.__proto__.constructor = Line;}function Text(l,v,s,tA,tB,f,c) {	this.__proto__ = new GameObject(v.x,v.y,size(l.lenth*s,s));	this.__proto__.constructor = Text;	this.text = l;	this.pColor = c;	this.textAlign = tA;	this.textBaseline = tB;		this.render = function (ctx) {		ctx.textAlign = this.textAlign;		ctx.textBaseline = this.textBaseline;		ctx.font = s+"px "+f;				ctx.fillText(this.text,0,0);	}};// ######// SCENES// ######function Scene(i) {	this.__proto__ = new GameObject(0,0,size(0,0));		this.__proto__.constructor = Scene;	this.handleMouse = true;	this.debugColor = "#4bf";	this.setPos = null;		i(this);}// #########################// Handling Keyboard & Mouse// #########################var KeyBoard = {	bckspc: 8,	enter: 13,	shift: 16,	ctrl:  17,	alt:   18,	esc:   27,	space: 32,	arr_l: 37,	arr_u: 38,	arr_r: 39,	arr_d: 40,	key_a: 65,	key_d: 68,	key_s: 83,	key_w: 87}function KeyBoardHandler () {	this.handlers = [];	this.add = function (obj) {		if (obj instanceof GameObject) {				}	};	this.remove = function (name) {		};};function MouseHandler () {	};// ####// GAME// ####function Game() {	var lastTime = new Date().getTime();	var init;	var fps = 0;	if (!Game.__instance) {		Game.__instance = this;		init = function () {			var childrenByNames = [];			Game.__instance.globalCounter = 0;			Game.__instance.increaseCounter = function () {				return this.globalCounter++;			};			// Object Registration			Game.__instance.registerObject = function (obj) {				if (obj.name.length != 0) {					childrenByNames[obj.name] = obj;				}			};			Game.__instance.get = function (name) {				if (name.length != 0) {					if (this.isReservedName(name)) {						return childrenByNames[name];					}				}			};			Game.__instance.remove = function (name) {				if (name.length != 0) {					var i = 0;					for (var childName in childrenByNames) {						if (name == childName) {							delete childrenByNames[childName];														break;						}						i++;					}				}			};			// Name Reservation			var reservedNames = [];			Game.__instance.reserveName = function (name) {				reservedNames[name] = name;			};			Game.__instance.isReservedName = function (name) {				if (reservedNames[name]) {					return true;				}								return false;			};			Game.__instance.removeReservedName = function (name) {				if (name.length != 0) {					var i = 0;					for (var childName in reservedNames) {						if (name == childName) {							delete reservedNames[childName];														break;						}						i++;					}				}			}			Game.__instance.actions = null;			Game.__instance.addAction = null;			Game.__instance.pColor = "#000";			Game.__instance.setBackground = function (color) {				this.pColor = color;			};			Game.__instance.__proto__ = new GameObject(0,0,size(0,0));			Game.__instance.__proto__.constructor = Game;			Game.__instance.winSize = function () {				return size(this.rect.w,this.rect.h);			};			Game.__instance.canvas = null;			Game.__instance.debug = false;			Game.__instance.start = function (r) {				this.timer = setInterval(function () {					Game.__instance.update(0);					Game.__instance.render(Game.__instance.ctx);				},1000/r);						this.rate = r;			};			Game.__instance.addHandler = function (name,func) {				this.canvas.addEventListener(name,func);			};			Game.__instance.init = function (props) {				this.canvas = document.getElementById(props.canvas);				this.ctx = this.canvas.getContext("2d");				this.parent = null;						if (!props.size.isNull()) {					this.rect.setSize(props.size);					this.canvas.width = props.size.w;					this.canvas.height = props.size.h;				}						this.start(props.rate);				this.addHandler("mousedown",function(e) {new Game().mouseHandler("down",e);});				this.addHandler("mousemove",function(e) {new Game().mouseHandler("move",e);});				this.addHandler("click",function(e) {new Game().mouseHandler("click",e)});			};			Game.__instance.render = function (ctx) {				ctx.clearRect(0,0,this.rect.w,this.rect.h);				ctx.fillStyle = this.pColor;				ctx.fillRect(0,0,this.rect.w,this.rect.h);						for (var i = 0; i < this.children.length; i++) {					this.children[i].draw(ctx);					if (new Game().debug) {						this.children[i].renderAABB(ctx);					}				}						ctx.font = "14px Arial";				ctx.fillStyle = "#fff";				ctx.textAlign = "left";				ctx.textBaseline = "bottom";				ctx.fillText(fps.toFixed(1),5,this.rect.h - 5);			};			Game.__instance.update = function () {				fps = (new Date().getTime() - lastTime) / (1000/this.rate);				var dt = 2 - fps;				fps *= this.rate;				fps = this.rate * 2 - fps;				fps = (fps <= 0) ? 0 : fps;						for (var i = 0; i < this.children.length; i++) {					this.children[i].refresh(dt);				}				lastTime = new Date().getTime();			};				Game.__instance.mouseHandler = function (name,e) {				var self = new Game();						for (var i = 0; i < self.children.length; i++) {					if (self.children[i].handleMouse) {						var cursor = vec2(e.clientX-8,e.clientY-8)						if (!self.children[i].targetedHandler) {							self.children[i].mouseHandler(name,cursor);							}						else {							var child = self.children[i];							var childPos = self.children[i].pos.clone().add(vec2(child.rect.w/2,child.rect.h/2));							var center = cursor.clone().sub(childPos)							if (center.magnitude() < Math.pow(150,2) || name != "down") {								self.children[i].mouseHandler(name,cursor);							}						}					}				}			};		};				init ();	}	else return Game.__instance;}